# The host of the Datadog intake server to send Agent data to
dd_url: https://app.datadoghq.com

# The Datadog api key to associate your Agent's data with your organization.
# Can be found here:
# https://app.datadoghq.com/account/settings
api_key:

# If you need a proxy to connect to the Internet, provide it here (default:
# disabled). You can use the 'no_proxy' list to specify hosts that should bypass the
# proxy. These settings might impact your checks requests, please refer to the
# specific check documentation for more details.
#
# proxy:
#   http: HTTP_PROXY
#   https: HTTPS_PROXY
#   no_proxy:
#     - host1
#     - host2

# Setting this option to "yes" will tell the agent to skip validation of SSL/TLS certificates.
# This may be necessary if the agent is running behind a proxy. See this page for details:
# https://github.com/DataDog/dd-agent/wiki/Proxy-Configuration#using-haproxy-as-a-proxy
# skip_ssl_validation: no

# Setting this option to "yes" will force the agent to only use TLS 1.2 when
# pushing data to the url specified in "dd_url".
# force_tls_12: no

# Force the hostname to whatever you want. (default: auto-detected)
# hostname: mymachine.mydomain

# Set the host's tags (optional)
# tags:
#   - mytag
#   - env:prod
#   - role:database

# Histogram and Historate configuration
#
# Configure which aggregated value to compute. Possible values are: min, max,
# median, avg, sum and count.
#
# histogram_aggregates: ["max", "median", "avg", "count"]
#
# Configure which percentiles will be computed. Must be a list of float
# between 0 and 1.
# Warning: percentiles must be specified as yaml strings
#
# histogram_percentiles: ["0.95"]

# Forwarder timeout in seconds
# forwarder_timeout: 20

# The forwarder retries failed requests. Use this setting to change the
# maximum length of the forwarder's retry queue (each request in the queue
# takes no more than 2MB in memory)
# forwarder_retry_queue_max_size: 30

# The number of workers used by the forwarder. Please note each worker will
# open an outbound HTTP connection towards Datadog's metrics intake at every
# flush.
# forwarder_num_workers: 1

# Collect AWS EC2 custom tags as agent tags
# collect_ec2_tags: false

# The path containing check configuration files
# By default, uses the conf.d folder located in the agent configuration folder.
# confd_path:

# Additional path where to search for Python checks
# By default, uses the checks.d folder located in the agent configuration folder.
# additional_checksd:

# The port for the go_expvar server
# expvar_port: 5000

# The port on which the IPC api listens
# cmd_port: 5001

# The port for the browser GUI to be served
# Setting 'GUI_port: -1' turns off the GUI completely
# Default is '5002' on Windows and macOS ; turned off on Linux
# GUI_port: -1

# The Agent runs workers in parallel to execute checks. By default the number
# of workers is set to 1. If set to 0 the agent will automatically determine
# the best number of runners needed based on the number of checks running. This
# would optimize the check collection time but may produce CPU spikes.
# check_runners: 1

# Metadata collection should always be enabled, except if you are running several
# agents/dsd instances per host. In that case, only one agent should have it on.
# WARNING: disabling it on every agent will lead to display and billing issues
# enable_metadata_collection: true

# Enable the gohai collection of systems data
# enable_gohai: true

# IPC api server timeout in seconds
# server_timeout: 15

# Metadata providers, add or remove from the list to enable or disable collection.
# Intervals are expressed in seconds. You can also set a provider's interval to 0
# to disable it.
metadata_collectors:
  - name: 'resources'
    interval: 60

# DogStatsd
#
# If you don't want to enable the DogStatsd server, set this option to no
# use_dogstatsd: yes
#
# Make sure your client is sending to the same UDP port
# dogstatsd_port: 8125
#
# The host to bind to receive external metrics (used only by the dogstatsd
# server for now). For dogstatsd this is ignored if
# 'dogstatsd_non_local_traffic' is set to true
# bind_host: localhost
#
# Whether dogstatsd should listen to a Unix Socket instead of UDP (*nix only).
# Set to a valid filesystem path to enable
# dogstatsd_socket:
#
# Whether origin detection and container tagging should be enabled for Unix
# Socket incoming metrics. This feature is experimental for now.
#
# dogstatsd_origin_detection: false
#
# The buffer size use to receive statsd packet, in bytes
# dogstatsd_buffer_size: 1024
#
# Whether dogstatsd should listen to non local UDP traffic
# dogstatsd_non_local_traffic: no
#
# Publish dogstatsd's internal stats as Go expvars
# dogstatsd_stats_enable: no
#
# How many items in the dogstatsd's stats circular buffer
# dogstatsd_stats_buffer: 10
#
# The port for the go_expvar server
# dogstatsd_stats_port: 5000
#
# If you want to forward every packet received by the dogstatsd server
# to another statsd server, uncomment these lines.
# WARNING: Make sure that forwarded packets are regular statsd packets and not "dogstatsd" packets,
# as your other statsd server might not be able to handle them.
# statsd_forward_host: address_of_own_statsd_server
# statsd_forward_port: 8125
#
# If you want all statsd metrics coming from this host to be namespaced
# you can configure the namspace below. Each metric received will be prefixed
# with the namespace before it's sent to Datadog.
# statsd_metric_namespace:

# Logging
#
# log_level: info
log_file: AGENT_LOG_FILE

# Set to 'yes' to output logs in JSON format
# log_format_json: no

# Set to 'no' to disable logging to stdout
# log_to_console: yes

# Set to 'yes' to disable logging to the log file
# disable_file_logging: no

# Set to 'yes' to enable logging to syslog.
#
# log_to_syslog: no
#
# If 'syslog_uri' is left undefined/empty, a local domain socket connection will be attempted
#
# syslog_uri:
#
# Set to 'yes' to output in an RFC 5424-compliant format
#
# syslog_rfc: no
#
# If connecting through a TCP socket, set to 'yes' to enable TLS
#
# syslog_tls: no
#

# Trace Agent Specific Settings
#
apm_config:
#   Whether or not the APM Agent should run
  enabled: true
  log_file: TRACE_LOG_FILE
#   The environment tag that Traces should be tagged with
#   Will inherit from "env" tag if none is applied here
#   env: none
#   The port that the Receiver should listen on
#   receiver_port: 8126
#   Whether the Trace Agent should listen for non local traffic
#   Only enable if Traces are being sent to this Agent from another host/container
#   apm_non_local_traffic: false
#   Extra global sample rate to apply on all the traces
#   This sample rate is combined to the sample rate from the sampler logic, still promoting interesting traces
#   From 1 (no extra rate) to 0 (don't sample at all)
#   extra_sample_rate: 1.0
#   Maximum number of traces per second to sample.
#   The limit is applied over an average over a few minutes ; much bigger spikes are possible.
#   Set to 0 to disable the limit.
#   max_traces_per_second: 10
#   A blacklist of regular expressions can be provided to disable certain traces based on their resource name
#   all entries must be surrounded by double quotes and separated by commas
#   Example: ["(GET|POST) /healthcheck", "GET /V1"]
#   ignore_resources: []
